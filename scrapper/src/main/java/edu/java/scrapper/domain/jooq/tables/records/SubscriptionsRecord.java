/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.tables.records;


import edu.java.scrapper.domain.jooq.tables.Subscriptions;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SubscriptionsRecord extends UpdatableRecordImpl<SubscriptionsRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>SUBSCRIPTIONS.CHAT_ID</code>.
     */
    public void setChatId(@NotNull Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>SUBSCRIPTIONS.CHAT_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getChatId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>SUBSCRIPTIONS.LINK_ID</code>.
     */
    public void setLinkId(@NotNull Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>SUBSCRIPTIONS.LINK_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getLinkId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Integer> field1() {
        return Subscriptions.SUBSCRIPTIONS.CHAT_ID;
    }

    @Override
    @NotNull
    public Field<Integer> field2() {
        return Subscriptions.SUBSCRIPTIONS.LINK_ID;
    }

    @Override
    @NotNull
    public Integer component1() {
        return getChatId();
    }

    @Override
    @NotNull
    public Integer component2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public Integer value1() {
        return getChatId();
    }

    @Override
    @NotNull
    public Integer value2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public SubscriptionsRecord value1(@NotNull Integer value) {
        setChatId(value);
        return this;
    }

    @Override
    @NotNull
    public SubscriptionsRecord value2(@NotNull Integer value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public SubscriptionsRecord values(@NotNull Integer value1, @NotNull Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SubscriptionsRecord
     */
    public SubscriptionsRecord() {
        super(Subscriptions.SUBSCRIPTIONS);
    }

    /**
     * Create a detached, initialised SubscriptionsRecord
     */
    @ConstructorProperties({ "chatId", "linkId" })
    public SubscriptionsRecord(@NotNull Integer chatId, @NotNull Integer linkId) {
        super(Subscriptions.SUBSCRIPTIONS);

        setChatId(chatId);
        setLinkId(linkId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SubscriptionsRecord
     */
    public SubscriptionsRecord(edu.java.scrapper.domain.jooq.tables.pojos.Subscriptions value) {
        super(Subscriptions.SUBSCRIPTIONS);

        if (value != null) {
            setChatId(value.getChatId());
            setLinkId(value.getLinkId());
            resetChangedOnNotNull();
        }
    }
}
